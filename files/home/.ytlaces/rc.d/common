# Basic colors
RED_CORE="0;31m"
IRED_CORE="0;91m"
CYAN_CORE="0;36m"
ICYAN_CORE="0;96m"
GREEN_CORE="0;32m"
IGREEN_CORE="0;92m"
YELLOW_CORE="0;33m"
IYELLOW_CORE="0;93m"
PURPLE_CORE="0;35m"
IPURPLE_CORE="0;95m"
BLACK_CORE="0;30m"
RESET_CORE="0;0m"
RED="\[\033[0;31m\]"
IRED="\[\033[0;91m\]"
CYAN="\[\033[0;36m\]"
ICYAN="\[\033[0;96m\]"
GREEN="\[\033[0;32m\]"
IGREEN="\[\033[0;92m\]"
YELLOW="\[\033[0;33m\]"
IYELLOW="\[\033[0;93m\]"
PURPLE="\[\033[0;35m\]"
IPURPLE="\[\033[0;95m\]"
BLACK="\[\033[0;30m\]"
RESET="\[\033[0;0m\]"



export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history
if [ -z "$ZSH_VERSION" ]; then
    shopt -s histappend                      # append to history, don't overwrite it
else
    setopt histappend                      # append to history, don't overwrite it
fi
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

FILES_TO_SOURCE=(
    # git completion
    "/usr/share/git/completion/git-prompt.sh"
    # git prompts
    "/usr/lib/git-core/git-sh-prompt"
    # osx git prompt
    "/usr/local/Cellar/git/1.9.1/etc/bash_completion.d/git-prompt.sh"
)

for f in "${FILES_TO_SOURCE[@]}"
do
  [[ -f "${f}" ]] && source "${f}"
done

# used in the prompt command below to display what git branch im in.
function has_git_branch {
    local branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')
    if [ "$branch" = "" ]; then
        return 0
    else
        return 1
    fi
}

# Echos the repo that you are in.
# Might not work if you dont have a tracking branch
function parse_git_repo {
    has_git_branch
    if [ $? -eq 1 ]; then
        local repo=$(git remote -v  2> /dev/null|head -n 1)
        local repo_name=${repo%.git*}
        local repo_name=${repo_name##*/}
        if [ "x$repo_name" != "x" ];
        then
            echo " ($repo_name)"
        fi
    fi
}

function parse_git_dirty_color {
    git_bare_string='fatal: This operation must be run in a work tree'
    git_clean_string='nothing to commit'
    git_merge_string='Unmerged paths'
    git_status="$(git status 2> /dev/null)"

    if [[ ${git_status} =~ ${git_clean_string} ]]; then
        # No changes present
        echo "$IGREEN_CORE"
    elif [ "$git_bare_string" == "$git_status_string" ]; then
        # Bare repository
        echo "$RESET_CORE"
    elif [ "$git_merge_string" == "$git_status_string" ]; then
        # Open merge
        echo "$IRED_CORE"
    else
        # Changes present
        echo "$IPURPLE_CORE"
    fi
    unset git_status_string git_bare_string git_clean_string git_merge_string
}

HISTSIZE=100000
if [ -z "$ZSH_VERSION" ]; then
    PS1="$CYAN\$(date "+%H:%M:%S") $IYELLOW\u:\w\\[\033[\$(parse_git_dirty_color)\]\$(parse_git_repo)\$(__git_ps1)$RESET\n"
else
    # zsh shell
    if ! type compdef > /dev/null; then
        autoload +X compinit && compinit
    fi
    export HISTFILE="$HOME/.zsh-history"
    export SAVEHIST=$HISTSIZE
    setopt PROMPT_SUBST
    setopt hist_ignore_space
    setopt autocd
    autoload -U colors && colors
    PS1="%{$fg[yellow]%}%n:%d%{$reset_color%} (%?)\$(__git_ps1)
$ "
    # zsh will use the editor mappings that match the editor
    # defined in EDITOR. This switch switches back to emacs.
    bindkey -e
    bindkey '^R' history-incremental-search-backward
fi

# add cookbook
source <("$HOME"/bin/tome init s "$HOME"/.ytlaces/cookbook "$SHELL")

# add rustup directories
export PATH=$HOME/.cargo/bin:$PATH

# add Go directories
export PATH=$HOME/go/bin/:$PATH
# assume Go is installed here.
export PATH=/usr/local/go/bin/:$PATH
if which go > /dev/null; then
  export PATH=$(go env GOPATH)/bin:$PATH
fi

# add personal bin directories
# prefix so we can override
export PATH=$HOME/bin:$PATH

# add pip user directories
PATH=$HOME/.local/bin:$PATH

# add ruby directories
PATH=$HOME/.gem/ruby/2.7.0/bin:$PATH

# use IBUS as the input manager
export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus

# editor should be VIM
export EDITOR=vim

# adding fzf
if [ -z "$ZSH_VERSION" ]; then
    binding_files=(
        "/usr/share/doc/fzf/examples/key-bindings.bash"
        "/usr/share/fzf/key-bindings.bash"
    )
    for f in "${binding_files[@]}"; do
        if [ -f "$f" ]; then
            source "$f"
        fi
    done
else
    binding_files=(
        "/usr/share/doc/fzf/examples/key-bindings.zsh"
        "/usr/share/fzf/key-bindings.zsh"
    )
    for f in "${binding_files[@]}"; do
        if [ -f "$f" ]; then
            source "$f"
        fi
    done
fi

# start ssh-agent
# set SSH_AUTH_SOCK env var to a fixed value
export SSH_AUTH_SOCK=~/.ssh/ssh-agent.sock

# test whether $SSH_AUTH_SOCK is valid
ssh-add -l 2>/dev/null >/dev/null

# if not valid, then start ssh-agent using $SSH_AUTH_SOCK
[ $? -ge 2 ] && rm -f "$SSH_AUTH_SOCK" && ssh-agent -a "$SSH_AUTH_SOCK" >/dev/null
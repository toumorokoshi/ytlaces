# Basic colors
RED_CORE="0;31m"
IRED_CORE="0;91m"
CYAN_CORE="0;36m"
ICYAN_CORE="0;96m"
GREEN_CORE="0;32m"
IGREEN_CORE="0;92m"
YELLOW_CORE="0;33m"
IYELLOW_CORE="0;93m"
PURPLE_CORE="0;35m"
IPURPLE_CORE="0;95m"
BLACK_CORE="0;30m"
RESET_CORE="0;0m"
RED="\[\033[0;31m\]"
IRED="\[\033[0;91m\]"
CYAN="\[\033[0;36m\]"
ICYAN="\[\033[0;96m\]"
GREEN="\[\033[0;32m\]"
IGREEN="\[\033[0;92m\]"
YELLOW="\[\033[0;33m\]"
IYELLOW="\[\033[0;93m\]"
PURPLE="\[\033[0;35m\]"
IPURPLE="\[\033[0;95m\]"
BLACK="\[\033[0;30m\]"
RESET="\[\033[0;0m\]"


# We share a command history throughout all prompts
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=$HISTSIZE            # big big history
shopt -s histappend                      # append to history, dont overwrite it


# Save and reload the history after each command finishes
export PROMPT_COMMAND="history -a; history -c; history -r;"

# need bash completion
GIT_PROMPT_PATH=/usr/share/git/completion/git-prompt.sh
[[ -f $GIT_PROMPT_PATH ]] && source $GIT_PROMPT_PATH

# On OSX, we need to source git completion directly
OSX_GIT_PATH=/usr/local/Cellar/git/1.9.1/etc/bash_completion.d/git-prompt.sh
[[ -f $OSX_GIT_PATH ]] && source $OSX_GIT_PATH

# used in the prompt command below to display what git branch im in.
function has_git_branch {
    local branch=`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'`
    if [ "x$branch" = "x" ]; then
        return 0
    else
        return 1
    fi
}

# Echos the repo that you are in.
# Might not work if you dont have a tracking branch
function parse_git_repo {
    has_git_branch
    if [ $? -eq 1 ]; then
        local repo=$(git remote -v  2> /dev/null|head -n 1)
        local repo_name=${repo%.git*}
        local repo_name=${repo_name##*/}
        if [ "x$repo_name" != "x" ];
        then
            echo " ($repo_name)"
        fi
    fi
}

function parse_git_dirty_color {
    git_bare_string='fatal: This operation must be run in a work tree'
    git_clean_string='nothing to commit'
    git_merge_string='Unmerged paths'
    git_status="$(git status 2> /dev/null)"

    if [[ ${git_status} =~ ${git_clean_string} ]]; then
        # No changes present
        echo "$IGREEN_CORE"
    elif [ "$git_bare_string" == "$git_status_string" ]; then
        # Bare repository
        echo "$RESET_CORE"
    elif [ "$git_merge_string" == "$git_status_string" ]; then
        # Open merge
        echo "$IRED_CORE"
    else
        # Changes present
        echo "$IPURPLE_CORE"
    fi
    unset git_status_string git_bare_string git_clean_string git_merge_string
}

export PS1="$IYELLOW\u:\w\\[\033[\$(parse_git_dirty_color)\]\$(parse_git_repo)\$(__git_ps1)\n$RESET$ "

# add sub
tmp=`pwd`; cd $HOME/.ytlaces/sub/libexec/ && . ./sub-init && cd $tmp
